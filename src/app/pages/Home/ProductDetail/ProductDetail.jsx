import { Button, Col, Form, Image, Input, message, Modal, Rate } from "antd";
import { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import {
  APIAddToCart,
  APIDeleteFeedback,
  APIGetFeedbacks,
  APIGetProductById,
  APIGetUserId,
  APISubmitFeedback,
  APIUpdateFeedback,
} from "../../../api/api";
import { cartLenght } from "../../../globalVariable/cart";
import PageLayOut from "../../../layouts/PageLayOut/PageLayOut";
import "./ProductDetail.css";
// import { useNavigate } from "react-router-dom";




const ProductDetail = () => {
  const [product, setProduct] = useState(null);
  const [feedbacks, setFeedbacks] = useState([]);
  const [isFeedbackModalVisible, setFeedbackModalVisible] = useState(false);
  const [editingFeedback, setEditingFeedback] = useState(null);
  const { productId } = useParams();
  const userId = localStorage.getItem("userID");
  const [compareModalVisible, setCompareModalVisible] = useState(false);
  const [categoryProducts, setCategoryProducts] = useState([]);
  // const navigate = useNavigate();
  // const [productData, setProductData] = useState([]);
  const [comparePopupVisible, setComparePopupVisible] = useState(false);
  const [comparisonData, setComparisonData] = useState([]);



  // Fetch product details
  useEffect(() => {
    if (!productId) return;

    const fetchProductDetails = async () => {
        try {
            console.log("G·ªçi API v·ªõi productId:", productId); // üîç Ki·ªÉm tra productId tr∆∞·ªõc khi g·ªçi API
            const response = await APIGetProductById(productId);
            console.log("K·∫øt qu·∫£ API:", response); // üîç Ki·ªÉm tra response c√≥ d·ªØ li·ªáu kh√¥ng

            if (!response || !response.data) {
                console.error("Error: response ho·∫∑c response.data kh√¥ng h·ª£p l·ªá!");
                return;
            }

            const productDetails = response.data;
            setProduct(productDetails);
            console.log("Product Data:", productDetails);

            if (productDetails.categoryId) {
                fetchCategoryProducts(productDetails.categoryId, productDetails.productId);
            } else {
                console.warn("Warning: categoryId kh√¥ng t·ªìn t·∫°i!");
            }
        } catch (error) {
            console.error("Error fetching product:", error);
        }
    };

    fetchProductDetails();
}, [productId]);



  const fetchCategoryProducts = async (categoryId, currentProductId) => {
    try {
        const response = await fetch(
            `https://swdteam7-hfgrdwa4dfhbe0ga.southeastasia-01.azurewebsites.net/api/products/category/${categoryId}`
        );
        const data = await response.json();

        console.log("Category Products API Response:", data);

        // Ki·ªÉm tra n·∫øu API tr·∫£ v·ªÅ object c√≥ key `items`, thay v√¨ m·∫£ng tr·ª±c ti·∫øp
        const productsArray = Array.isArray(data) ? data : data.items;

        if (!Array.isArray(productsArray)) {
            console.error("Error: API kh√¥ng tr·∫£ v·ªÅ m·∫£ng s·∫£n ph·∫©m h·ª£p l·ªá", data);
            return;
        }

        // L·ªçc ra s·∫£n ph·∫©m kh√¥ng tr√πng v·ªõi s·∫£n ph·∫©m hi·ªán t·∫°i
        const filteredProducts = productsArray.filter((p) => p.productId !== currentProductId);
        console.log("Danh s√°ch s·∫£n ph·∫©m sau khi l·ªçc:", filteredProducts);

        setCategoryProducts(filteredProducts);
    } catch (error) {
        console.error("Error fetching category products:", error);
    }
};




  // H√†m ƒë·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng
  const fetchUserInfo = async (userId) => {
    try {
      const response = await APIGetUserId(userId); // S·ª≠ d·ª•ng APIGetUserId
      return response.data.name || "Ng∆∞·ªùi d√πng ·∫©n danh"; // Tr·∫£ v·ªÅ t√™n ng∆∞·ªùi d√πng
    } catch (error) {
      console.error("Error fetching user info:", error);
      return "Ng∆∞·ªùi d√πng ·∫©n danh"; // Tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu c√≥ l·ªói
    }
  };
  // Khi fetch feedbacks, l·∫•y th√¥ng tin ng∆∞·ªùi d√πng
  useEffect(() => {
    if (productId) {
      APIGetFeedbacks()
        .then(async (response) => {
          const productFeedbacks = response.data.filter(
            (fb) => fb.productId === productId
          );
          // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng cho t·ª´ng feedback
          const feedbacksWithUser = await Promise.all(
            productFeedbacks.map(async (fb) => {
              const userName = await fetchUserInfo(fb.id); // L·∫•y t√™n ng∆∞·ªùi d√πng
              return { ...fb, userName }; // Th√™m userName v√†o feedback
            })
          );
          setFeedbacks(feedbacksWithUser); // C·∫≠p nh·∫≠t state feedbacks
        })
        .catch((error) => {
          console.error("Error fetching feedbacks:", error);
        });
    }
  }, [productId]);

  // Add to cart
  const handleAddToCart = async (variantId) => {
    if (!userId) {
      message.error("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng.");
      return;
    }

    try {
      const response = await APIAddToCart(userId, variantId, 1);
      if (response.status === 200) {
        cartLenght.set(cartLenght.value +1)
        message.success("Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng th√†nh c√¥ng!");
      }
    } catch (error) {
      console.error("Error adding to cart:", error);
      message.error("Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng th·∫•t b·∫°i.");
    }
  };

  // Feedback form submission
  const handleSubmitFeedback = async (rating, comment) => {
  if (!userId) {
    message.error("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë√°nh gi√° s·∫£n ph·∫©m.");
    return;
  }

  try {
    // Hi·ªÉn th·ªã loading trong khi g·ª≠i ƒë√°nh gi√°
    // const hideLoading = message.loading("ƒêang g·ª≠i ƒë√°nh gi√°...", 0);
    
    const response = await APISubmitFeedback(
      userId,
      productId,
      rating,
      comment
    );
    
    // hideLoading(); 
    
    if (response.status === 200 || response.status === 201) {
      message.success("ƒê√°nh gi√° c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!");

      // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
      const userName = await fetchUserInfo(userId);
      
      // T·∫°o feedback m·ªõi v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
      const newFeedback = {
        id: userId,
        userId: userId, // Th√™m c·∫£ userId ƒë·ªÉ d·ªÖ ki·ªÉm tra
        userName,
        rating,
        comment,
        productId,
        feedbackId: response.data.feedbackId,
        createdAt: new Date().toISOString(), // Th√™m th·ªùi gian t·∫°o
        updatedAt: new Date().toISOString() // Th√™m th·ªùi gian c·∫≠p nh·∫≠t
      };

      // C·∫≠p nh·∫≠t state theo c√°ch kh√¥ng l√†m m·∫•t d·ªØ li·ªáu c≈©
      setFeedbacks(prevFeedbacks => {
        // Ki·ªÉm tra xem feedback ƒë√£ t·ªìn t·∫°i ch∆∞a (tr∆∞·ªùng h·ª£p update)
        const existingIndex = prevFeedbacks.findIndex(
          fb => fb.feedbackId === newFeedback.feedbackId
        );
        
        if (existingIndex >= 0) {
          // N·∫øu ƒë√£ t·ªìn t·∫°i th√¨ c·∫≠p nh·∫≠t
          const updated = [...prevFeedbacks];
          updated[existingIndex] = newFeedback;
          return updated;
        }
        
        // N·∫øu ch∆∞a t·ªìn t·∫°i th√¨ th√™m m·ªõi v√†o ƒë·∫ßu m·∫£ng
        return [newFeedback, ...prevFeedbacks];
      });

      // ƒê√≥ng modal v√† reset tr·∫°ng th√°i editing
      setFeedbackModalVisible(false);
      setEditingFeedback(null);
      
      // C·∫≠p nh·∫≠t rating trung b√¨nh n·∫øu c·∫ßn
      if (product) {
        const newAvgRating = calculateNewAverageRating([...feedbacks, newFeedback]);
        setProduct(prev => ({ ...prev, averageRating: newAvgRating }));
      }
    }
  } catch (error) {
    console.error("Error submitting feedback:", error);
    message.error("G·ª≠i ƒë√°nh gi√° th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.");
  }
};

// H√†m t√≠nh rating trung b√¨nh m·ªõi
const calculateNewAverageRating = (feedbacks) => {
  if (feedbacks.length === 0) return 0;
  const sum = feedbacks.reduce((acc, fb) => acc + fb.rating, 0);
  return sum / feedbacks.length;
};
  // Update feedback
  const handleUpdateFeedback = async (feedbackId, rating, comment) => {
    try {
      const response = await APIUpdateFeedback(feedbackId, rating, comment);
      if (response.status === 200) {
        message.success("ƒê√°nh gi√° c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!");
        const updatedFeedbacks = await APIGetFeedbacks();
        setFeedbacks(
          updatedFeedbacks.data.filter((fb) => fb.productId === productId)
        );
        setEditingFeedback(null);
      }
    } catch (error) {
      console.error("Error updating feedback:", error);
      message.error("C·∫≠p nh·∫≠t ƒë√°nh gi√° th·∫•t b·∫°i.");
    }
  };

  // Delete feedback
  const handleDeleteFeedback = async (feedbackId) => {
    try {
      const response = await APIDeleteFeedback(feedbackId);
      if (response.status === 200) {
        message.success("ƒê√°nh gi√° c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!");
        const updatedFeedbacks = await APIGetFeedbacks();
        setFeedbacks(
          updatedFeedbacks.data.filter((fb) => fb.productId === productId)
        );
      }
    } catch (error) {
      console.error("Error deleting feedback:", error);
      message.error("X√≥a ƒë√°nh gi√° th·∫•t b·∫°i.");
    }
  };



const handleCompare = async (selectedProductId) => {
  try {
    if (!product || !selectedProductId) {
      alert("L·ªói: Kh√¥ng c√≥ d·ªØ li·ªáu s·∫£n ph·∫©m.");
      return;
    }

    // G·ªçi API l·∫•y th√¥ng tin s·∫£n ph·∫©m hi·ªán t·∫°i
    const responseCurrent = await fetch(
      `https://swdteam7-hfgrdwa4dfhbe0ga.southeastasia-01.azurewebsites.net/api/products/${product.productId}`
    );
    if (!responseCurrent.ok) throw new Error("L·ªói khi l·∫•y s·∫£n ph·∫©m hi·ªán t·∫°i");

    const currentProductData = await responseCurrent.json();

    // G·ªçi API l·∫•y th√¥ng tin s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ so s√°nh
    const responseSelected = await fetch(
      `https://swdteam7-hfgrdwa4dfhbe0ga.southeastasia-01.azurewebsites.net/api/products/${selectedProductId}`
    );
    if (!responseSelected.ok) throw new Error("L·ªói khi l·∫•y s·∫£n ph·∫©m so s√°nh");

    const selectedProductData = await responseSelected.json();

    console.log("S·∫£n ph·∫©m hi·ªán t·∫°i:", currentProductData);
    console.log("S·∫£n ph·∫©m so s√°nh:", selectedProductData);

    // C·∫≠p nh·∫≠t danh s√°ch so s√°nh
    setComparisonData([currentProductData, selectedProductData]);
    setComparePopupVisible(true);
  } catch (error) {
    console.error("L·ªói khi l·∫•y th√¥ng tin s·∫£n ph·∫©m:", error);
    alert("L·ªói khi l·∫•y th√¥ng tin s·∫£n ph·∫©m! Vui l√≤ng th·ª≠ l·∫°i.");
  }
};





  // Feedback form modal
  const FeedbackForm = ({ visible, onCancel, onSubmit, initialValues }) => {
    const [form] = Form.useForm();

    useEffect(() => {
      if (initialValues) {
        form.setFieldsValue({
          rating: initialValues.rating,
          comment: initialValues.comment,
        });
      }
    }, [initialValues, form]);

    const onFinish = (values) => {
      onSubmit(values.rating, values.comment);
      form.resetFields();
    };
    
    

    return (
      <Modal
        title={initialValues ? "C·∫≠p nh·∫≠t ƒê√°nh Gi√°" : "Vi·∫øt ƒê√°nh Gi√°"}
        visible={visible}
        onCancel={onCancel}
        footer={null}
      >
        <Form form={form} onFinish={onFinish} initialValues={initialValues}>
          <Form.Item
            name="rating"
            label="ƒê√°nh gi√°"
            rules={[{ required: true }]}
          >
            <Rate />
          </Form.Item>
          <Form.Item
            name="comment"
            label="B√¨nh lu·∫≠n"
            rules={[{ required: true }]}
          >
            <Input.TextArea />
          </Form.Item>
          <Form.Item>
            <Button type="primary" htmlType="submit">
              {initialValues ? "C·∫≠p nh·∫≠t" : "G·ª≠i"}
            </Button>
          </Form.Item>
        </Form>
      </Modal>      
    );
  };

  if (!product) return <p>Loading...</p>;

  return (
    <PageLayOut>
      <div className="product-detail-container">
        {/* Product Image */}
        <div className="product-header">
          <Col span={10}>
            <Image src={product.avatarImageUrl} alt={product.productName} />
          </Col>

          {/* General Information */}
          <div className="product-info">
            <h1 style={{ textAlign: "left", color: "#C0437F" }}>
              {product.productName}
            </h1>
            <div className="product-meta">
              <span className="rating">{product.averageRating} ‚≠ê</span> |
              <span
                style={{ textAlign: "left", color: "#C0437F" }}
                className="reviews"
              >
                ({feedbacks.length} ƒë√°nh gi√°)
              </span>{" "}
              |
              <span
                style={{ textAlign: "left", color: "#C0437F" }}
                className="product-code"
              >
                M√£ s·∫£n ph·∫©m: {productId}
              </span>
            </div>

            <p className="price">
              {product.variants && product.variants.length > 0 ? (
                <>
                  <span className="discounted-price">
                    {Number(product.variants[0].price).toLocaleString("vi-VN")}{" "}
                    ƒë
                  </span>
                  <del className="original-price">
                    {Number(product.variants[0].price * 1.05).toLocaleString(
                      "vi-VN"
                    )}{" "}
                    VND
                  </del>
                </>
              ) : (
                <span>Li√™n h·ªá ƒë·ªÉ bi·∫øt gi√°</span>
              )}
            </p>
            <p>Dung t√≠ch: {product.variants[0].volume}ml</p>
            <p>S·ªë l∆∞·ª£ng c√≤n: {product.variants[0].stockQuantity}</p>
            <Button
              type="primary"
              className="add-to-cart"
              onClick={() => handleAddToCart(product.variants[0].variantId)}
            >
              Th√™m v√†o gi·ªè h√†ng
            </Button>
            <Button
              type="default"
              className="compare-button"
              onClick={() => setCompareModalVisible(true)}
            >
              SO S√ÅNH
            </Button>
          </div>
        </div>

        <Modal
  title="Ch·ªçn s·∫£n ph·∫©m ƒë·ªÉ so s√°nh"
  open={compareModalVisible}
  onCancel={() => setCompareModalVisible(false)}
  footer={null}
>
  {categoryProducts.length > 0 ? (
    <div className="compare-product-list">
      {categoryProducts.map((p) => (
        <div key={p.productId} className="compare-product-card">
          <img src={product.avatarImageUrl} alt={product.productName} width="150" />
          <p className="compare-product-name">{p.productName}</p>
          <button className="compare-product-button" onClick={() => handleCompare(p.productId, p.categoryId)}>
            Ch·ªçn ƒë·ªÉ so s√°nh
          </button>
        </div>
      ))}
    </div>
  ) : (
    <p className="no-product-message">Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o c√πng danh m·ª•c.</p>
  )}
</Modal>







<Modal
  title="So s√°nh s·∫£n ph·∫©m"
  open={comparePopupVisible}
  onCancel={() => setComparePopupVisible(false)}
  footer={null}
  width={800} // TƒÉng chi·ªÅu r·ªông modal cho d·ªÖ nh√¨n
>
  {comparisonData.length === 2 ? (
    <div className="compare-container">
      <table className="compare-table">
        <thead>
          <tr>
            <th>Th√¥ng tin</th>
            {comparisonData.map((product) => (
              <th key={product.productId}>{product.productName}</th>
            ))}
          </tr>
        </thead>
        <tbody>
          {/* H√¨nh ·∫£nh s·∫£n ph·∫©m */}
          <tr>
            <td><strong>H√¨nh ·∫£nh</strong></td>
            {comparisonData.map((product) => (
              <td key={product.productId}>
                <img src={product.avatarImageUrl} alt={product.productName} width="120" />
              </td>
            ))}
          </tr>

          {/* Th√¥ng tin chung */}
          <tr>
            <td><strong>Th∆∞∆°ng hi·ªáu</strong></td>
            {comparisonData.map((product) => <td key={product.productId}>{product.brandName}</td>)}
          </tr>
          <tr>
            <td><strong>Danh m·ª•c</strong></td>
            {comparisonData.map((product) => <td key={product.productId}>{product.categoryName}</td>)}
          </tr>

          {/* L·∫•y th√¥ng tin t·ª´ variant */}
          {comparisonData[0].variants?.length > 0 && (
            <>
              <tr>
                <td><strong>Th·ªÉ t√≠ch</strong></td>
                {comparisonData.map((product) => <td key={product.productId}>{product.variants[0].volume} ml</td>)}
              </tr>
              <tr>
                <td><strong>Lo·∫°i da ph√π h·ª£p</strong></td>
                {comparisonData.map((product) => <td key={product.productId}>{product.variants[0].skinType}</td>)}
              </tr>
              <tr>
                <td><strong>Gi√°</strong></td>
                {comparisonData.map((product) => <td key={product.productId}>{product.variants[0].price} VND</td>)}
              </tr>
              <tr>
                <td><strong>S·ªë l∆∞·ª£ng kho</strong></td>
                {comparisonData.map((product) => <td key={product.productId}>{product.variants[0].stockQuantity}</td>)}
              </tr>
            </>
          )}

          {/* Th√†nh ph·∫ßn */}
          <tr>
            <td><strong>Th√†nh ph·∫ßn ch√≠nh</strong></td>
            {comparisonData.map((product) => <td key={product.productId}>{product.variants[0].mainIngredients}</td>)}
          </tr>
          <tr>
            <td><strong>Th√†nh ph·∫ßn ƒë·∫ßy ƒë·ªß</strong></td>
            {comparisonData.map((product) => <td key={product.productId}>{product.variants[0].fullIngredients}</td>)}
          </tr>

          {/* M√¥ t·∫£ s·∫£n ph·∫©m */}
          <tr>
            <td><strong>M√¥ t·∫£</strong></td>
            {comparisonData.map((product) => <td key={product.productId}>{product.describe?.summary || "Kh√¥ng c√≥"}</td>)}
          </tr>
          <tr>
            <td><strong>Ng∆∞·ªùi d√πng ph√π h·ª£p</strong></td>
            {comparisonData.map((product) => <td key={product.productId}>{product.describe?.suitableUsers || "Kh√¥ng c√≥"}</td>)}
          </tr>
        </tbody>
      </table>
    </div>
  ) : (
    <p>ƒêang t·∫£i d·ªØ li·ªáu s·∫£n ph·∫©m...</p>
  )}
</Modal>


        {/* Product Details */}
        <div className="product-details">
          <h2>Th√¥ng tin s·∫£n ph·∫©m:</h2>
          <div className="product-description">
            <p>
              {product.describe?.solutionsForSkinHairConditions ||
                "Kh√¥ng c√≥ th√¥ng tin"}
            </p>
          </div>

          <h2>Th√¥ng s·ªë s·∫£n ph·∫©m:</h2>
          <table>
            <tbody>
              <tr>
                <td>Th∆∞∆°ng hi·ªáu:</td>
                <td>{product.brandName}</td>
              </tr>
              <tr>
                <td>Xu·∫•t x·ª© th∆∞∆°ng hi·ªáu:</td>
                <td>
                  {product.specifications?.brandOrigin || "Kh√¥ng c√≥ th√¥ng tin"}
                </td>
              </tr>
              <tr>
                <td>N∆°i s·∫£n xu·∫•t:</td>
                <td>
                  {product.specifications?.placeOfManufacture ||
                    "Kh√¥ng c√≥ th√¥ng tin"}
                </td>
              </tr>
              <tr>
                <td>ƒê·ªëi t∆∞·ª£ng s·ª≠ d·ª•ng:</td>
                <td>
                  {product.describe?.suitableUsers || "Kh√¥ng c√≥ th√¥ng tin"}
                </td>
              </tr>
            </tbody>
          </table>

          <h2>Th√†nh ph·∫ßn s·∫£n ph·∫©m:</h2>
          <p>{product.describe?.uses || "Kh√¥ng c√≥ th√¥ng tin"}</p>

          <h2>H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:</h2>
          <p>{product.describe?.preserve || "Kh√¥ng c√≥ th√¥ng tin"}</p>
        </div>

        {/* Product Reviews */}
        <div className="product-reviews">
          <h1>ƒê√°nh gi√° s·∫£n ph·∫©m:</h1>
          <div className="review-summary">
            <span className="rating-score">
              {product.averageRating.toFixed(1)}
            </span>
            <div className="stars">
              {"‚≠ê".repeat(Math.round(product.averageRating))}
            </div>
            <p>{feedbacks.length} ƒë√°nh gi√°</p>
          </div>

          {/* Review List */}
          <div className="review-list">
            {feedbacks.length > 0 ? (
              feedbacks.map((fb, index) => (
                <div key={index} className="review-item">
                  <p className="review-user">{fb.userName}</p>
                  <div className="review-stars">{"‚≠ê".repeat(fb.rating)}</div>
                  <p className="review-text">{fb.comment}</p>
                  {fb.id === userId && (
                    <div>
                      <Button onClick={() => setEditingFeedback(fb)}>
                        C·∫≠p nh·∫≠t
                      </Button>
                      <Button
                        onClick={() => handleDeleteFeedback(fb.feedbackId)}
                      >
                        X√≥a
                      </Button>
                    </div>
                  )}
                </div>
              ))
            ) : (
              <p>Ch∆∞a c√≥ ƒë√°nh gi√° n√†o.</p>
            )}
          </div>

          {/* Write Review Button */}
          <Button
            className="write-review"
            onClick={() => setFeedbackModalVisible(true)}
          >
            Vi·∫øt B√¨nh Lu·∫≠n
          </Button>
        </div>
      </div>

      {/* Feedback Form Modal */}
      <FeedbackForm
        visible={isFeedbackModalVisible || editingFeedback !== null}
        onCancel={() => {
          setFeedbackModalVisible(false);
          setEditingFeedback(null);
        }}
        onSubmit={(rating, comment) => {
          if (editingFeedback) {
            handleUpdateFeedback(editingFeedback.feedbackId, rating, comment);
          } else {
            handleSubmitFeedback(rating, comment);
          }
        }}
        initialValues={editingFeedback}
      />
    </PageLayOut>
    );
  };

export default ProductDetail;
